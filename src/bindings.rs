// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod supabase {
    pub mod wrappers {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod http {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Headers = _rt::Vec<(_rt::String, _rt::String)>;
            #[derive(Clone, Copy)]
            pub enum Method {
                Get,
                Post,
                Put,
                Patch,
                Delete,
            }
            impl ::core::fmt::Debug for Method {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Method::Get => f.debug_tuple("Method::Get").finish(),
                        Method::Post => f.debug_tuple("Method::Post").finish(),
                        Method::Put => f.debug_tuple("Method::Put").finish(),
                        Method::Patch => f.debug_tuple("Method::Patch").finish(),
                        Method::Delete => f.debug_tuple("Method::Delete").finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct Request {
                pub method: Method,
                pub url: _rt::String,
                pub headers: Headers,
                pub body: _rt::String,
            }
            impl ::core::fmt::Debug for Request {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Request")
                        .field("method", &self.method)
                        .field("url", &self.url)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Response {
                pub url: _rt::String,
                pub status_code: u16,
                pub headers: Headers,
                pub body: _rt::String,
            }
            impl ::core::fmt::Debug for Response {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Response")
                        .field("url", &self.url)
                        .field("status-code", &self.status_code)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            pub type HttpError = _rt::String;
            pub type HttpResult = Result<Response, HttpError>;
            #[allow(unused_unsafe, clippy::all)]
            pub fn get(req: &Request) -> HttpResult {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Request {
                        method: method0,
                        url: url0,
                        headers: headers0,
                        body: body0,
                    } = req;
                    let result1 = match method0 {
                        Method::Get => 0i32,
                        Method::Post => 1i32,
                        Method::Put => 2i32,
                        Method::Patch => 3i32,
                        Method::Delete => 4i32,
                    };
                    let vec2 = url0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let vec6 = headers0;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec6.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let (t3_0, t3_1) = e;
                            let vec4 = t3_0;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = t3_1;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    let vec7 = body0;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/http@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "get"]
                        fn wit_import9(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import9(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import9(
                            result1,
                            ptr2.cast_mut(),
                            len2,
                            result6,
                            len6,
                            ptr7.cast_mut(),
                            len7,
                            ptr8,
                        )
                    };
                    let l10 = i32::from(*ptr8.add(0).cast::<u8>());
                    let result30 = match l10 {
                        0 => {
                            let e = {
                                let l11 = *ptr8
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l12 = *ptr8
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len13 = l12;
                                let bytes13 = _rt::Vec::from_raw_parts(
                                    l11.cast(),
                                    len13,
                                    len13,
                                );
                                let l14 = i32::from(
                                    *ptr8
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u16>(),
                                );
                                let l15 = *ptr8
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l16 = *ptr8
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base23 = l15;
                                let len23 = l16;
                                let mut result23 = _rt::Vec::with_capacity(len23);
                                for i in 0..len23 {
                                    let base = base23
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e23 = {
                                        let l17 = *base.add(0).cast::<*mut u8>();
                                        let l18 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len19 = l18;
                                        let bytes19 = _rt::Vec::from_raw_parts(
                                            l17.cast(),
                                            len19,
                                            len19,
                                        );
                                        let l20 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l21 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len22 = l21;
                                        let bytes22 = _rt::Vec::from_raw_parts(
                                            l20.cast(),
                                            len22,
                                            len22,
                                        );
                                        (_rt::string_lift(bytes19), _rt::string_lift(bytes22))
                                    };
                                    result23.push(e23);
                                }
                                _rt::cabi_dealloc(
                                    base23,
                                    len23 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l24 = *ptr8
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l25 = *ptr8
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len26 = l25;
                                let bytes26 = _rt::Vec::from_raw_parts(
                                    l24.cast(),
                                    len26,
                                    len26,
                                );
                                Response {
                                    url: _rt::string_lift(bytes13),
                                    status_code: l14 as u16,
                                    headers: result23,
                                    body: _rt::string_lift(bytes26),
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l27 = *ptr8
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l28 = *ptr8
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len29 = l28;
                                let bytes29 = _rt::Vec::from_raw_parts(
                                    l27.cast(),
                                    len29,
                                    len29,
                                );
                                _rt::string_lift(bytes29)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout6.size() != 0 {
                        _rt::alloc::dealloc(result6.cast(), layout6);
                    }
                    result30
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn post(req: &Request) -> HttpResult {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Request {
                        method: method0,
                        url: url0,
                        headers: headers0,
                        body: body0,
                    } = req;
                    let result1 = match method0 {
                        Method::Get => 0i32,
                        Method::Post => 1i32,
                        Method::Put => 2i32,
                        Method::Patch => 3i32,
                        Method::Delete => 4i32,
                    };
                    let vec2 = url0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let vec6 = headers0;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec6.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let (t3_0, t3_1) = e;
                            let vec4 = t3_0;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = t3_1;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    let vec7 = body0;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/http@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "post"]
                        fn wit_import9(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import9(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import9(
                            result1,
                            ptr2.cast_mut(),
                            len2,
                            result6,
                            len6,
                            ptr7.cast_mut(),
                            len7,
                            ptr8,
                        )
                    };
                    let l10 = i32::from(*ptr8.add(0).cast::<u8>());
                    let result30 = match l10 {
                        0 => {
                            let e = {
                                let l11 = *ptr8
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l12 = *ptr8
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len13 = l12;
                                let bytes13 = _rt::Vec::from_raw_parts(
                                    l11.cast(),
                                    len13,
                                    len13,
                                );
                                let l14 = i32::from(
                                    *ptr8
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u16>(),
                                );
                                let l15 = *ptr8
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l16 = *ptr8
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base23 = l15;
                                let len23 = l16;
                                let mut result23 = _rt::Vec::with_capacity(len23);
                                for i in 0..len23 {
                                    let base = base23
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e23 = {
                                        let l17 = *base.add(0).cast::<*mut u8>();
                                        let l18 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len19 = l18;
                                        let bytes19 = _rt::Vec::from_raw_parts(
                                            l17.cast(),
                                            len19,
                                            len19,
                                        );
                                        let l20 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l21 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len22 = l21;
                                        let bytes22 = _rt::Vec::from_raw_parts(
                                            l20.cast(),
                                            len22,
                                            len22,
                                        );
                                        (_rt::string_lift(bytes19), _rt::string_lift(bytes22))
                                    };
                                    result23.push(e23);
                                }
                                _rt::cabi_dealloc(
                                    base23,
                                    len23 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l24 = *ptr8
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l25 = *ptr8
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len26 = l25;
                                let bytes26 = _rt::Vec::from_raw_parts(
                                    l24.cast(),
                                    len26,
                                    len26,
                                );
                                Response {
                                    url: _rt::string_lift(bytes13),
                                    status_code: l14 as u16,
                                    headers: result23,
                                    body: _rt::string_lift(bytes26),
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l27 = *ptr8
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l28 = *ptr8
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len29 = l28;
                                let bytes29 = _rt::Vec::from_raw_parts(
                                    l27.cast(),
                                    len29,
                                    len29,
                                );
                                _rt::string_lift(bytes29)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout6.size() != 0 {
                        _rt::alloc::dealloc(result6.cast(), layout6);
                    }
                    result30
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn put(req: &Request) -> HttpResult {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Request {
                        method: method0,
                        url: url0,
                        headers: headers0,
                        body: body0,
                    } = req;
                    let result1 = match method0 {
                        Method::Get => 0i32,
                        Method::Post => 1i32,
                        Method::Put => 2i32,
                        Method::Patch => 3i32,
                        Method::Delete => 4i32,
                    };
                    let vec2 = url0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let vec6 = headers0;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec6.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let (t3_0, t3_1) = e;
                            let vec4 = t3_0;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = t3_1;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    let vec7 = body0;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/http@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "put"]
                        fn wit_import9(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import9(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import9(
                            result1,
                            ptr2.cast_mut(),
                            len2,
                            result6,
                            len6,
                            ptr7.cast_mut(),
                            len7,
                            ptr8,
                        )
                    };
                    let l10 = i32::from(*ptr8.add(0).cast::<u8>());
                    let result30 = match l10 {
                        0 => {
                            let e = {
                                let l11 = *ptr8
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l12 = *ptr8
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len13 = l12;
                                let bytes13 = _rt::Vec::from_raw_parts(
                                    l11.cast(),
                                    len13,
                                    len13,
                                );
                                let l14 = i32::from(
                                    *ptr8
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u16>(),
                                );
                                let l15 = *ptr8
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l16 = *ptr8
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base23 = l15;
                                let len23 = l16;
                                let mut result23 = _rt::Vec::with_capacity(len23);
                                for i in 0..len23 {
                                    let base = base23
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e23 = {
                                        let l17 = *base.add(0).cast::<*mut u8>();
                                        let l18 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len19 = l18;
                                        let bytes19 = _rt::Vec::from_raw_parts(
                                            l17.cast(),
                                            len19,
                                            len19,
                                        );
                                        let l20 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l21 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len22 = l21;
                                        let bytes22 = _rt::Vec::from_raw_parts(
                                            l20.cast(),
                                            len22,
                                            len22,
                                        );
                                        (_rt::string_lift(bytes19), _rt::string_lift(bytes22))
                                    };
                                    result23.push(e23);
                                }
                                _rt::cabi_dealloc(
                                    base23,
                                    len23 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l24 = *ptr8
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l25 = *ptr8
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len26 = l25;
                                let bytes26 = _rt::Vec::from_raw_parts(
                                    l24.cast(),
                                    len26,
                                    len26,
                                );
                                Response {
                                    url: _rt::string_lift(bytes13),
                                    status_code: l14 as u16,
                                    headers: result23,
                                    body: _rt::string_lift(bytes26),
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l27 = *ptr8
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l28 = *ptr8
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len29 = l28;
                                let bytes29 = _rt::Vec::from_raw_parts(
                                    l27.cast(),
                                    len29,
                                    len29,
                                );
                                _rt::string_lift(bytes29)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout6.size() != 0 {
                        _rt::alloc::dealloc(result6.cast(), layout6);
                    }
                    result30
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn patch(req: &Request) -> HttpResult {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Request {
                        method: method0,
                        url: url0,
                        headers: headers0,
                        body: body0,
                    } = req;
                    let result1 = match method0 {
                        Method::Get => 0i32,
                        Method::Post => 1i32,
                        Method::Put => 2i32,
                        Method::Patch => 3i32,
                        Method::Delete => 4i32,
                    };
                    let vec2 = url0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let vec6 = headers0;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec6.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let (t3_0, t3_1) = e;
                            let vec4 = t3_0;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = t3_1;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    let vec7 = body0;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/http@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "patch"]
                        fn wit_import9(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import9(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import9(
                            result1,
                            ptr2.cast_mut(),
                            len2,
                            result6,
                            len6,
                            ptr7.cast_mut(),
                            len7,
                            ptr8,
                        )
                    };
                    let l10 = i32::from(*ptr8.add(0).cast::<u8>());
                    let result30 = match l10 {
                        0 => {
                            let e = {
                                let l11 = *ptr8
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l12 = *ptr8
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len13 = l12;
                                let bytes13 = _rt::Vec::from_raw_parts(
                                    l11.cast(),
                                    len13,
                                    len13,
                                );
                                let l14 = i32::from(
                                    *ptr8
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u16>(),
                                );
                                let l15 = *ptr8
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l16 = *ptr8
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base23 = l15;
                                let len23 = l16;
                                let mut result23 = _rt::Vec::with_capacity(len23);
                                for i in 0..len23 {
                                    let base = base23
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e23 = {
                                        let l17 = *base.add(0).cast::<*mut u8>();
                                        let l18 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len19 = l18;
                                        let bytes19 = _rt::Vec::from_raw_parts(
                                            l17.cast(),
                                            len19,
                                            len19,
                                        );
                                        let l20 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l21 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len22 = l21;
                                        let bytes22 = _rt::Vec::from_raw_parts(
                                            l20.cast(),
                                            len22,
                                            len22,
                                        );
                                        (_rt::string_lift(bytes19), _rt::string_lift(bytes22))
                                    };
                                    result23.push(e23);
                                }
                                _rt::cabi_dealloc(
                                    base23,
                                    len23 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l24 = *ptr8
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l25 = *ptr8
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len26 = l25;
                                let bytes26 = _rt::Vec::from_raw_parts(
                                    l24.cast(),
                                    len26,
                                    len26,
                                );
                                Response {
                                    url: _rt::string_lift(bytes13),
                                    status_code: l14 as u16,
                                    headers: result23,
                                    body: _rt::string_lift(bytes26),
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l27 = *ptr8
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l28 = *ptr8
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len29 = l28;
                                let bytes29 = _rt::Vec::from_raw_parts(
                                    l27.cast(),
                                    len29,
                                    len29,
                                );
                                _rt::string_lift(bytes29)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout6.size() != 0 {
                        _rt::alloc::dealloc(result6.cast(), layout6);
                    }
                    result30
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn delete(req: &Request) -> HttpResult {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 8
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Request {
                        method: method0,
                        url: url0,
                        headers: headers0,
                        body: body0,
                    } = req;
                    let result1 = match method0 {
                        Method::Get => 0i32,
                        Method::Post => 1i32,
                        Method::Put => 2i32,
                        Method::Patch => 3i32,
                        Method::Delete => 4i32,
                    };
                    let vec2 = url0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let vec6 = headers0;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec6.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let (t3_0, t3_1) = e;
                            let vec4 = t3_0;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec5 = t3_1;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    let vec7 = body0;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/http@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "delete"]
                        fn wit_import9(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import9(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import9(
                            result1,
                            ptr2.cast_mut(),
                            len2,
                            result6,
                            len6,
                            ptr7.cast_mut(),
                            len7,
                            ptr8,
                        )
                    };
                    let l10 = i32::from(*ptr8.add(0).cast::<u8>());
                    let result30 = match l10 {
                        0 => {
                            let e = {
                                let l11 = *ptr8
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l12 = *ptr8
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len13 = l12;
                                let bytes13 = _rt::Vec::from_raw_parts(
                                    l11.cast(),
                                    len13,
                                    len13,
                                );
                                let l14 = i32::from(
                                    *ptr8
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u16>(),
                                );
                                let l15 = *ptr8
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l16 = *ptr8
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base23 = l15;
                                let len23 = l16;
                                let mut result23 = _rt::Vec::with_capacity(len23);
                                for i in 0..len23 {
                                    let base = base23
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e23 = {
                                        let l17 = *base.add(0).cast::<*mut u8>();
                                        let l18 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len19 = l18;
                                        let bytes19 = _rt::Vec::from_raw_parts(
                                            l17.cast(),
                                            len19,
                                            len19,
                                        );
                                        let l20 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l21 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len22 = l21;
                                        let bytes22 = _rt::Vec::from_raw_parts(
                                            l20.cast(),
                                            len22,
                                            len22,
                                        );
                                        (_rt::string_lift(bytes19), _rt::string_lift(bytes22))
                                    };
                                    result23.push(e23);
                                }
                                _rt::cabi_dealloc(
                                    base23,
                                    len23 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l24 = *ptr8
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l25 = *ptr8
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len26 = l25;
                                let bytes26 = _rt::Vec::from_raw_parts(
                                    l24.cast(),
                                    len26,
                                    len26,
                                );
                                Response {
                                    url: _rt::string_lift(bytes13),
                                    status_code: l14 as u16,
                                    headers: result23,
                                    body: _rt::string_lift(bytes26),
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l27 = *ptr8
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l28 = *ptr8
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len29 = l28;
                                let bytes29 = _rt::Vec::from_raw_parts(
                                    l27.cast(),
                                    len29,
                                    len29,
                                );
                                _rt::string_lift(bytes29)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout6.size() != 0 {
                        _rt::alloc::dealloc(result6.cast(), layout6);
                    }
                    result30
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn error_for_status(resp: &Response) -> Result<(), HttpError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Response {
                        url: url0,
                        status_code: status_code0,
                        headers: headers0,
                        body: body0,
                    } = resp;
                    let vec1 = url0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec5 = headers0;
                    let len5 = vec5.len();
                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec5.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result5 = if layout5.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout5);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec5.into_iter().enumerate() {
                        let base = result5
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let (t2_0, t2_1) = e;
                            let vec3 = t2_0;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = t2_1;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    }
                    let vec6 = body0;
                    let ptr6 = vec6.as_ptr().cast::<u8>();
                    let len6 = vec6.len();
                    let ptr7 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/http@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "error-for-status"]
                        fn wit_import8(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import8(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import8(
                            ptr1.cast_mut(),
                            len1,
                            _rt::as_i32(status_code0),
                            result5,
                            len5,
                            ptr6.cast_mut(),
                            len6,
                            ptr7,
                        )
                    };
                    let l9 = i32::from(*ptr7.add(0).cast::<u8>());
                    let result13 = match l9 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l10 = *ptr7
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l11 = *ptr7
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len12 = l11;
                                let bytes12 = _rt::Vec::from_raw_parts(
                                    l10.cast(),
                                    len12,
                                    len12,
                                );
                                _rt::string_lift(bytes12)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout5.size() != 0 {
                        _rt::alloc::dealloc(result5.cast(), layout5);
                    }
                    result13
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod stats {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Metadata = Option<_rt::String>;
            #[derive(Clone, Copy)]
            pub enum Metric {
                CreateTimes,
                RowsIn,
                RowsOut,
                BytesIn,
                BytesOut,
            }
            impl ::core::fmt::Debug for Metric {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Metric::CreateTimes => {
                            f.debug_tuple("Metric::CreateTimes").finish()
                        }
                        Metric::RowsIn => f.debug_tuple("Metric::RowsIn").finish(),
                        Metric::RowsOut => f.debug_tuple("Metric::RowsOut").finish(),
                        Metric::BytesIn => f.debug_tuple("Metric::BytesIn").finish(),
                        Metric::BytesOut => f.debug_tuple("Metric::BytesOut").finish(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn inc_stats(fdw_name: &str, metric: Metric, inc: i64) -> () {
                unsafe {
                    let vec0 = fdw_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let result1 = match metric {
                        Metric::CreateTimes => 0i32,
                        Metric::RowsIn => 1i32,
                        Metric::RowsOut => 2i32,
                        Metric::BytesIn => 3i32,
                        Metric::BytesOut => 4i32,
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/stats@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "inc-stats"]
                        fn wit_import2(_: *mut u8, _: usize, _: i32, _: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(ptr0.cast_mut(), len0, result1, _rt::as_i64(&inc))
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_metadata(fdw_name: &str) -> Metadata {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = fdw_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/stats@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "get-metadata"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result7 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn set_metadata(fdw_name: &str, metadata: &Metadata) -> () {
                unsafe {
                    let vec0 = fdw_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let (result2_0, result2_1, result2_2) = match metadata {
                        Some(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (1i32, ptr1.cast_mut(), len1)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/stats@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "set-metadata"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(
                            ptr0.cast_mut(),
                            len0,
                            result2_0,
                            result2_1,
                            result2_2,
                        )
                    };
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum TypeOid {
                Bool,
                I8,
                I16,
                F32,
                I32,
                F64,
                I64,
                Numeric,
                String,
                Date,
                Timestamp,
                Timestamptz,
                Json,
                Uuid,
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for TypeOid {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        TypeOid::Bool => f.debug_tuple("TypeOid::Bool").finish(),
                        TypeOid::I8 => f.debug_tuple("TypeOid::I8").finish(),
                        TypeOid::I16 => f.debug_tuple("TypeOid::I16").finish(),
                        TypeOid::F32 => f.debug_tuple("TypeOid::F32").finish(),
                        TypeOid::I32 => f.debug_tuple("TypeOid::I32").finish(),
                        TypeOid::F64 => f.debug_tuple("TypeOid::F64").finish(),
                        TypeOid::I64 => f.debug_tuple("TypeOid::I64").finish(),
                        TypeOid::Numeric => f.debug_tuple("TypeOid::Numeric").finish(),
                        TypeOid::String => f.debug_tuple("TypeOid::String").finish(),
                        TypeOid::Date => f.debug_tuple("TypeOid::Date").finish(),
                        TypeOid::Timestamp => {
                            f.debug_tuple("TypeOid::Timestamp").finish()
                        }
                        TypeOid::Timestamptz => {
                            f.debug_tuple("TypeOid::Timestamptz").finish()
                        }
                        TypeOid::Json => f.debug_tuple("TypeOid::Json").finish(),
                        TypeOid::Uuid => f.debug_tuple("TypeOid::Uuid").finish(),
                        TypeOid::Other(e) => {
                            f.debug_tuple("TypeOid::Other").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum Cell {
                Bool(bool),
                I8(i8),
                I16(i16),
                F32(f32),
                I32(i32),
                F64(f64),
                I64(i64),
                Numeric(f64),
                String(_rt::String),
                /// seconds since Unix epoch
                Date(i64),
                /// microseconds since Unix epoch
                Timestamp(i64),
                Timestamptz(i64),
                Json(_rt::String),
                Uuid(_rt::String),
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Cell {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Cell::Bool(e) => f.debug_tuple("Cell::Bool").field(e).finish(),
                        Cell::I8(e) => f.debug_tuple("Cell::I8").field(e).finish(),
                        Cell::I16(e) => f.debug_tuple("Cell::I16").field(e).finish(),
                        Cell::F32(e) => f.debug_tuple("Cell::F32").field(e).finish(),
                        Cell::I32(e) => f.debug_tuple("Cell::I32").field(e).finish(),
                        Cell::F64(e) => f.debug_tuple("Cell::F64").field(e).finish(),
                        Cell::I64(e) => f.debug_tuple("Cell::I64").field(e).finish(),
                        Cell::Numeric(e) => {
                            f.debug_tuple("Cell::Numeric").field(e).finish()
                        }
                        Cell::String(e) => {
                            f.debug_tuple("Cell::String").field(e).finish()
                        }
                        Cell::Date(e) => f.debug_tuple("Cell::Date").field(e).finish(),
                        Cell::Timestamp(e) => {
                            f.debug_tuple("Cell::Timestamp").field(e).finish()
                        }
                        Cell::Timestamptz(e) => {
                            f.debug_tuple("Cell::Timestamptz").field(e).finish()
                        }
                        Cell::Json(e) => f.debug_tuple("Cell::Json").field(e).finish(),
                        Cell::Uuid(e) => f.debug_tuple("Cell::Uuid").field(e).finish(),
                        Cell::Other(e) => f.debug_tuple("Cell::Other").field(e).finish(),
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Row {
                handle: _rt::Resource<Row>,
            }
            impl Row {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Row {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]row"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Column {
                handle: _rt::Resource<Column>,
            }
            impl Column {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Column {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]column"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Clone)]
            pub enum Value {
                Cell(Cell),
                Array(_rt::Vec<Cell>),
            }
            impl ::core::fmt::Debug for Value {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Value::Cell(e) => f.debug_tuple("Value::Cell").field(e).finish(),
                        Value::Array(e) => {
                            f.debug_tuple("Value::Array").field(e).finish()
                        }
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Param {
                pub id: u32,
                pub type_oid: u32,
            }
            impl ::core::fmt::Debug for Param {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Param")
                        .field("id", &self.id)
                        .field("type-oid", &self.type_oid)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Qual {
                handle: _rt::Resource<Qual>,
            }
            impl Qual {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Qual {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]qual"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Sort {
                handle: _rt::Resource<Sort>,
            }
            impl Sort {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Sort {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]sort"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Limit {
                handle: _rt::Resource<Limit>,
            }
            impl Limit {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Limit {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]limit"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Clone)]
            pub enum OptionsType {
                Server,
                Table,
                ImportSchema,
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for OptionsType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        OptionsType::Server => {
                            f.debug_tuple("OptionsType::Server").finish()
                        }
                        OptionsType::Table => {
                            f.debug_tuple("OptionsType::Table").finish()
                        }
                        OptionsType::ImportSchema => {
                            f.debug_tuple("OptionsType::ImportSchema").finish()
                        }
                        OptionsType::Other(e) => {
                            f.debug_tuple("OptionsType::Other").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Options {
                handle: _rt::Resource<Options>,
            }
            impl Options {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Options {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]options"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum ImportSchemaType {
                All,
                LimitTo,
                Except,
            }
            impl ::core::fmt::Debug for ImportSchemaType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ImportSchemaType::All => {
                            f.debug_tuple("ImportSchemaType::All").finish()
                        }
                        ImportSchemaType::LimitTo => {
                            f.debug_tuple("ImportSchemaType::LimitTo").finish()
                        }
                        ImportSchemaType::Except => {
                            f.debug_tuple("ImportSchemaType::Except").finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct ImportForeignSchemaStmt {
                pub server_name: _rt::String,
                pub remote_schema: _rt::String,
                pub local_schema: _rt::String,
                pub list_type: ImportSchemaType,
                pub table_list: _rt::Vec<_rt::String>,
            }
            impl ::core::fmt::Debug for ImportForeignSchemaStmt {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImportForeignSchemaStmt")
                        .field("server-name", &self.server_name)
                        .field("remote-schema", &self.remote_schema)
                        .field("local-schema", &self.local_schema)
                        .field("list-type", &self.list_type)
                        .field("table-list", &self.table_list)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Context {
                handle: _rt::Resource<Context>,
            }
            impl Context {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Context {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]context"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            pub type FdwError = _rt::String;
            pub type FdwResult = Result<(), FdwError>;
            impl Row {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]row"]
                            fn wit_import0() -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0() -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0() };
                        unsafe { Row::from_handle(ret as u32) }
                    }
                }
            }
            impl Row {
                #[allow(unused_unsafe, clippy::all)]
                pub fn cols(&self) -> _rt::Vec<_rt::String> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]row.cols"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base7 = l2;
                        let len7 = l3;
                        let mut result7 = _rt::Vec::with_capacity(len7);
                        for i in 0..len7 {
                            let base = base7
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            let e7 = {
                                let l4 = *base.add(0).cast::<*mut u8>();
                                let l5 = *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            result7.push(e7);
                        }
                        _rt::cabi_dealloc(
                            base7,
                            len7 * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result8 = result7;
                        result8
                    }
                }
            }
            impl Row {
                #[allow(unused_unsafe, clippy::all)]
                pub fn cells(&self) -> _rt::Vec<Option<Cell>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]row.cells"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base30 = l2;
                        let len30 = l3;
                        let mut result30 = _rt::Vec::with_capacity(len30);
                        for i in 0..len30 {
                            let base = base30
                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                            let e30 = {
                                let l4 = i32::from(*base.add(0).cast::<u8>());
                                match l4 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l5 = i32::from(*base.add(8).cast::<u8>());
                                            let v29 = match l5 {
                                                0 => {
                                                    let e29 = {
                                                        let l6 = i32::from(*base.add(16).cast::<u8>());
                                                        _rt::bool_lift(l6 as u8)
                                                    };
                                                    Cell::Bool(e29)
                                                }
                                                1 => {
                                                    let e29 = {
                                                        let l7 = i32::from(*base.add(16).cast::<i8>());
                                                        l7 as i8
                                                    };
                                                    Cell::I8(e29)
                                                }
                                                2 => {
                                                    let e29 = {
                                                        let l8 = i32::from(*base.add(16).cast::<i16>());
                                                        l8 as i16
                                                    };
                                                    Cell::I16(e29)
                                                }
                                                3 => {
                                                    let e29 = {
                                                        let l9 = *base.add(16).cast::<f32>();
                                                        l9
                                                    };
                                                    Cell::F32(e29)
                                                }
                                                4 => {
                                                    let e29 = {
                                                        let l10 = *base.add(16).cast::<i32>();
                                                        l10
                                                    };
                                                    Cell::I32(e29)
                                                }
                                                5 => {
                                                    let e29 = {
                                                        let l11 = *base.add(16).cast::<f64>();
                                                        l11
                                                    };
                                                    Cell::F64(e29)
                                                }
                                                6 => {
                                                    let e29 = {
                                                        let l12 = *base.add(16).cast::<i64>();
                                                        l12
                                                    };
                                                    Cell::I64(e29)
                                                }
                                                7 => {
                                                    let e29 = {
                                                        let l13 = *base.add(16).cast::<f64>();
                                                        l13
                                                    };
                                                    Cell::Numeric(e29)
                                                }
                                                8 => {
                                                    let e29 = {
                                                        let l14 = *base.add(16).cast::<*mut u8>();
                                                        let l15 = *base
                                                            .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len16 = l15;
                                                        let bytes16 = _rt::Vec::from_raw_parts(
                                                            l14.cast(),
                                                            len16,
                                                            len16,
                                                        );
                                                        _rt::string_lift(bytes16)
                                                    };
                                                    Cell::String(e29)
                                                }
                                                9 => {
                                                    let e29 = {
                                                        let l17 = *base.add(16).cast::<i64>();
                                                        l17
                                                    };
                                                    Cell::Date(e29)
                                                }
                                                10 => {
                                                    let e29 = {
                                                        let l18 = *base.add(16).cast::<i64>();
                                                        l18
                                                    };
                                                    Cell::Timestamp(e29)
                                                }
                                                11 => {
                                                    let e29 = {
                                                        let l19 = *base.add(16).cast::<i64>();
                                                        l19
                                                    };
                                                    Cell::Timestamptz(e29)
                                                }
                                                12 => {
                                                    let e29 = {
                                                        let l20 = *base.add(16).cast::<*mut u8>();
                                                        let l21 = *base
                                                            .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len22 = l21;
                                                        let bytes22 = _rt::Vec::from_raw_parts(
                                                            l20.cast(),
                                                            len22,
                                                            len22,
                                                        );
                                                        _rt::string_lift(bytes22)
                                                    };
                                                    Cell::Json(e29)
                                                }
                                                13 => {
                                                    let e29 = {
                                                        let l23 = *base.add(16).cast::<*mut u8>();
                                                        let l24 = *base
                                                            .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len25 = l24;
                                                        let bytes25 = _rt::Vec::from_raw_parts(
                                                            l23.cast(),
                                                            len25,
                                                            len25,
                                                        );
                                                        _rt::string_lift(bytes25)
                                                    };
                                                    Cell::Uuid(e29)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 14, "invalid enum discriminant");
                                                    let e29 = {
                                                        let l26 = *base.add(16).cast::<*mut u8>();
                                                        let l27 = *base
                                                            .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len28 = l27;
                                                        let bytes28 = _rt::Vec::from_raw_parts(
                                                            l26.cast(),
                                                            len28,
                                                            len28,
                                                        );
                                                        _rt::string_lift(bytes28)
                                                    };
                                                    Cell::Other(e29)
                                                }
                                            };
                                            v29
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                }
                            };
                            result30.push(e30);
                        }
                        _rt::cabi_dealloc(
                            base30,
                            len30 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                            8,
                        );
                        let result31 = result30;
                        result31
                    }
                }
            }
            impl Row {
                #[allow(unused_unsafe, clippy::all)]
                pub fn push(&self, cell: Option<&Cell>) -> () {
                    unsafe {
                        let (result5_0, result5_1, result5_2, result5_3) = match cell {
                            Some(e) => {
                                let (result4_0, result4_1, result4_2) = match e {
                                    Cell::Bool(e) => {
                                        (
                                            0i32,
                                            ::core::mem::MaybeUninit::new(
                                                i64::from(
                                                    match e {
                                                        true => 1,
                                                        false => 0,
                                                    },
                                                ) as u64,
                                            ),
                                            0usize,
                                        )
                                    }
                                    Cell::I8(e) => {
                                        (
                                            1i32,
                                            ::core::mem::MaybeUninit::new(
                                                i64::from(_rt::as_i32(e)) as u64,
                                            ),
                                            0usize,
                                        )
                                    }
                                    Cell::I16(e) => {
                                        (
                                            2i32,
                                            ::core::mem::MaybeUninit::new(
                                                i64::from(_rt::as_i32(e)) as u64,
                                            ),
                                            0usize,
                                        )
                                    }
                                    Cell::F32(e) => {
                                        (
                                            3i32,
                                            ::core::mem::MaybeUninit::new(
                                                i64::from((_rt::as_f32(e)).to_bits()) as u64,
                                            ),
                                            0usize,
                                        )
                                    }
                                    Cell::I32(e) => {
                                        (
                                            4i32,
                                            ::core::mem::MaybeUninit::new(
                                                i64::from(_rt::as_i32(e)) as u64,
                                            ),
                                            0usize,
                                        )
                                    }
                                    Cell::F64(e) => {
                                        (
                                            5i32,
                                            ::core::mem::MaybeUninit::new(
                                                (_rt::as_f64(e)).to_bits() as i64 as u64,
                                            ),
                                            0usize,
                                        )
                                    }
                                    Cell::I64(e) => {
                                        (
                                            6i32,
                                            ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                            0usize,
                                        )
                                    }
                                    Cell::Numeric(e) => {
                                        (
                                            7i32,
                                            ::core::mem::MaybeUninit::new(
                                                (_rt::as_f64(e)).to_bits() as i64 as u64,
                                            ),
                                            0usize,
                                        )
                                    }
                                    Cell::String(e) => {
                                        let vec0 = e;
                                        let ptr0 = vec0.as_ptr().cast::<u8>();
                                        let len0 = vec0.len();
                                        (
                                            8i32,
                                            {
                                                let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                                t
                                            },
                                            len0,
                                        )
                                    }
                                    Cell::Date(e) => {
                                        (
                                            9i32,
                                            ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                            0usize,
                                        )
                                    }
                                    Cell::Timestamp(e) => {
                                        (
                                            10i32,
                                            ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                            0usize,
                                        )
                                    }
                                    Cell::Timestamptz(e) => {
                                        (
                                            11i32,
                                            ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                            0usize,
                                        )
                                    }
                                    Cell::Json(e) => {
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        (
                                            12i32,
                                            {
                                                let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                                t
                                            },
                                            len1,
                                        )
                                    }
                                    Cell::Uuid(e) => {
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        (
                                            13i32,
                                            {
                                                let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                                t
                                            },
                                            len2,
                                        )
                                    }
                                    Cell::Other(e) => {
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        (
                                            14i32,
                                            {
                                                let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(ptr3.cast_mut());
                                                t
                                            },
                                            len3,
                                        )
                                    }
                                };
                                (1i32, result4_0, result4_1, result4_2)
                            }
                            None => {
                                (
                                    0i32,
                                    0i32,
                                    ::core::mem::MaybeUninit::<u64>::zeroed(),
                                    0usize,
                                )
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]row.push"]
                            fn wit_import6(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import6(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import6(
                                (self).handle() as i32,
                                result5_0,
                                result5_1,
                                result5_2,
                                result5_3,
                            )
                        };
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(index: u32) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]column"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0(_rt::as_i32(&index)) };
                        unsafe { Column::from_handle(ret as u32) }
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]column.name"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn num(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]column.num"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        ret as u32
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn type_oid(&self) -> TypeOid {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]column.type-oid"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let v6 = match l2 {
                            0 => TypeOid::Bool,
                            1 => TypeOid::I8,
                            2 => TypeOid::I16,
                            3 => TypeOid::F32,
                            4 => TypeOid::I32,
                            5 => TypeOid::F64,
                            6 => TypeOid::I64,
                            7 => TypeOid::Numeric,
                            8 => TypeOid::String,
                            9 => TypeOid::Date,
                            10 => TypeOid::Timestamp,
                            11 => TypeOid::Timestamptz,
                            12 => TypeOid::Json,
                            13 => TypeOid::Uuid,
                            n => {
                                debug_assert_eq!(n, 14, "invalid enum discriminant");
                                let e6 = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(
                                        l3.cast(),
                                        len5,
                                        len5,
                                    );
                                    _rt::string_lift(bytes5)
                                };
                                TypeOid::Other(e6)
                            }
                        };
                        let result7 = v6;
                        result7
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(index: u32) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]qual"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0(_rt::as_i32(&index)) };
                        unsafe { Qual::from_handle(ret as u32) }
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn field(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]qual.field"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn operator(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]qual.operator"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn value(&self) -> Value {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 16 + 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16
                                + 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]qual.value"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let v56 = match l2 {
                            0 => {
                                let e56 = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v27 = match l3 {
                                        0 => {
                                            let e27 = {
                                                let l4 = i32::from(*ptr0.add(16).cast::<u8>());
                                                _rt::bool_lift(l4 as u8)
                                            };
                                            Cell::Bool(e27)
                                        }
                                        1 => {
                                            let e27 = {
                                                let l5 = i32::from(*ptr0.add(16).cast::<i8>());
                                                l5 as i8
                                            };
                                            Cell::I8(e27)
                                        }
                                        2 => {
                                            let e27 = {
                                                let l6 = i32::from(*ptr0.add(16).cast::<i16>());
                                                l6 as i16
                                            };
                                            Cell::I16(e27)
                                        }
                                        3 => {
                                            let e27 = {
                                                let l7 = *ptr0.add(16).cast::<f32>();
                                                l7
                                            };
                                            Cell::F32(e27)
                                        }
                                        4 => {
                                            let e27 = {
                                                let l8 = *ptr0.add(16).cast::<i32>();
                                                l8
                                            };
                                            Cell::I32(e27)
                                        }
                                        5 => {
                                            let e27 = {
                                                let l9 = *ptr0.add(16).cast::<f64>();
                                                l9
                                            };
                                            Cell::F64(e27)
                                        }
                                        6 => {
                                            let e27 = {
                                                let l10 = *ptr0.add(16).cast::<i64>();
                                                l10
                                            };
                                            Cell::I64(e27)
                                        }
                                        7 => {
                                            let e27 = {
                                                let l11 = *ptr0.add(16).cast::<f64>();
                                                l11
                                            };
                                            Cell::Numeric(e27)
                                        }
                                        8 => {
                                            let e27 = {
                                                let l12 = *ptr0.add(16).cast::<*mut u8>();
                                                let l13 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            Cell::String(e27)
                                        }
                                        9 => {
                                            let e27 = {
                                                let l15 = *ptr0.add(16).cast::<i64>();
                                                l15
                                            };
                                            Cell::Date(e27)
                                        }
                                        10 => {
                                            let e27 = {
                                                let l16 = *ptr0.add(16).cast::<i64>();
                                                l16
                                            };
                                            Cell::Timestamp(e27)
                                        }
                                        11 => {
                                            let e27 = {
                                                let l17 = *ptr0.add(16).cast::<i64>();
                                                l17
                                            };
                                            Cell::Timestamptz(e27)
                                        }
                                        12 => {
                                            let e27 = {
                                                let l18 = *ptr0.add(16).cast::<*mut u8>();
                                                let l19 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                _rt::string_lift(bytes20)
                                            };
                                            Cell::Json(e27)
                                        }
                                        13 => {
                                            let e27 = {
                                                let l21 = *ptr0.add(16).cast::<*mut u8>();
                                                let l22 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );
                                                _rt::string_lift(bytes23)
                                            };
                                            Cell::Uuid(e27)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 14, "invalid enum discriminant");
                                            let e27 = {
                                                let l24 = *ptr0.add(16).cast::<*mut u8>();
                                                let l25 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len26 = l25;
                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                    l24.cast(),
                                                    len26,
                                                    len26,
                                                );
                                                _rt::string_lift(bytes26)
                                            };
                                            Cell::Other(e27)
                                        }
                                    };
                                    v27
                                };
                                Value::Cell(e56)
                            }
                            n => {
                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                let e56 = {
                                    let l28 = *ptr0.add(8).cast::<*mut u8>();
                                    let l29 = *ptr0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base55 = l28;
                                    let len55 = l29;
                                    let mut result55 = _rt::Vec::with_capacity(len55);
                                    for i in 0..len55 {
                                        let base = base55
                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e55 = {
                                            let l30 = i32::from(*base.add(0).cast::<u8>());
                                            let v54 = match l30 {
                                                0 => {
                                                    let e54 = {
                                                        let l31 = i32::from(*base.add(8).cast::<u8>());
                                                        _rt::bool_lift(l31 as u8)
                                                    };
                                                    Cell::Bool(e54)
                                                }
                                                1 => {
                                                    let e54 = {
                                                        let l32 = i32::from(*base.add(8).cast::<i8>());
                                                        l32 as i8
                                                    };
                                                    Cell::I8(e54)
                                                }
                                                2 => {
                                                    let e54 = {
                                                        let l33 = i32::from(*base.add(8).cast::<i16>());
                                                        l33 as i16
                                                    };
                                                    Cell::I16(e54)
                                                }
                                                3 => {
                                                    let e54 = {
                                                        let l34 = *base.add(8).cast::<f32>();
                                                        l34
                                                    };
                                                    Cell::F32(e54)
                                                }
                                                4 => {
                                                    let e54 = {
                                                        let l35 = *base.add(8).cast::<i32>();
                                                        l35
                                                    };
                                                    Cell::I32(e54)
                                                }
                                                5 => {
                                                    let e54 = {
                                                        let l36 = *base.add(8).cast::<f64>();
                                                        l36
                                                    };
                                                    Cell::F64(e54)
                                                }
                                                6 => {
                                                    let e54 = {
                                                        let l37 = *base.add(8).cast::<i64>();
                                                        l37
                                                    };
                                                    Cell::I64(e54)
                                                }
                                                7 => {
                                                    let e54 = {
                                                        let l38 = *base.add(8).cast::<f64>();
                                                        l38
                                                    };
                                                    Cell::Numeric(e54)
                                                }
                                                8 => {
                                                    let e54 = {
                                                        let l39 = *base.add(8).cast::<*mut u8>();
                                                        let l40 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len41 = l40;
                                                        let bytes41 = _rt::Vec::from_raw_parts(
                                                            l39.cast(),
                                                            len41,
                                                            len41,
                                                        );
                                                        _rt::string_lift(bytes41)
                                                    };
                                                    Cell::String(e54)
                                                }
                                                9 => {
                                                    let e54 = {
                                                        let l42 = *base.add(8).cast::<i64>();
                                                        l42
                                                    };
                                                    Cell::Date(e54)
                                                }
                                                10 => {
                                                    let e54 = {
                                                        let l43 = *base.add(8).cast::<i64>();
                                                        l43
                                                    };
                                                    Cell::Timestamp(e54)
                                                }
                                                11 => {
                                                    let e54 = {
                                                        let l44 = *base.add(8).cast::<i64>();
                                                        l44
                                                    };
                                                    Cell::Timestamptz(e54)
                                                }
                                                12 => {
                                                    let e54 = {
                                                        let l45 = *base.add(8).cast::<*mut u8>();
                                                        let l46 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len47 = l46;
                                                        let bytes47 = _rt::Vec::from_raw_parts(
                                                            l45.cast(),
                                                            len47,
                                                            len47,
                                                        );
                                                        _rt::string_lift(bytes47)
                                                    };
                                                    Cell::Json(e54)
                                                }
                                                13 => {
                                                    let e54 = {
                                                        let l48 = *base.add(8).cast::<*mut u8>();
                                                        let l49 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len50 = l49;
                                                        let bytes50 = _rt::Vec::from_raw_parts(
                                                            l48.cast(),
                                                            len50,
                                                            len50,
                                                        );
                                                        _rt::string_lift(bytes50)
                                                    };
                                                    Cell::Uuid(e54)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 14, "invalid enum discriminant");
                                                    let e54 = {
                                                        let l51 = *base.add(8).cast::<*mut u8>();
                                                        let l52 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len53 = l52;
                                                        let bytes53 = _rt::Vec::from_raw_parts(
                                                            l51.cast(),
                                                            len53,
                                                            len53,
                                                        );
                                                        _rt::string_lift(bytes53)
                                                    };
                                                    Cell::Other(e54)
                                                }
                                            };
                                            v54
                                        };
                                        result55.push(e55);
                                    }
                                    _rt::cabi_dealloc(
                                        base55,
                                        len55 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result55
                                };
                                Value::Array(e56)
                            }
                        };
                        let result57 = v56;
                        result57
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn use_or(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]qual.use-or"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn param(&self) -> Option<Param> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]qual.param"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result5 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0.add(4).cast::<i32>();
                                    let l4 = *ptr0.add(8).cast::<i32>();
                                    Param {
                                        id: l3 as u32,
                                        type_oid: l4 as u32,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result5
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn deparse(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]qual.deparse"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(index: u32) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]sort"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0(_rt::as_i32(&index)) };
                        unsafe { Sort::from_handle(ret as u32) }
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn field(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]sort.field"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn field_no(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]sort.field-no"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        ret as u32
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn reversed(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]sort.reversed"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn nulls_first(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]sort.nulls-first"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn collate(&self) -> Option<_rt::String> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]sort.collate"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(
                                        l3.cast(),
                                        len5,
                                        len5,
                                    );
                                    _rt::string_lift(bytes5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn deparse(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]sort.deparse"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn deparse_with_collate(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]sort.deparse-with-collate"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl Limit {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]limit"]
                            fn wit_import0() -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0() -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0() };
                        unsafe { Limit::from_handle(ret as u32) }
                    }
                }
            }
            impl Limit {
                #[allow(unused_unsafe, clippy::all)]
                pub fn count(&self) -> i64 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]limit.count"]
                            fn wit_import0(_: i32) -> i64;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i64 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        ret
                    }
                }
            }
            impl Limit {
                #[allow(unused_unsafe, clippy::all)]
                pub fn offset(&self) -> i64 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]limit.offset"]
                            fn wit_import0(_: i32) -> i64;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i64 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        ret
                    }
                }
            }
            impl Limit {
                #[allow(unused_unsafe, clippy::all)]
                pub fn deparse(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]limit.deparse"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl Options {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(options_type: &OptionsType) -> Self {
                    unsafe {
                        let (result1_0, result1_1, result1_2) = match options_type {
                            OptionsType::Server => {
                                (0i32, ::core::ptr::null_mut(), 0usize)
                            }
                            OptionsType::Table => (1i32, ::core::ptr::null_mut(), 0usize),
                            OptionsType::ImportSchema => {
                                (2i32, ::core::ptr::null_mut(), 0usize)
                            }
                            OptionsType::Other(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (3i32, ptr0.cast_mut(), len0)
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]options"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import2(result1_0, result1_1, result1_2)
                        };
                        unsafe { Options::from_handle(ret as u32) }
                    }
                }
            }
            impl Options {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self, key: &str) -> Option<_rt::String> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]options.get"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result7 = match l3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l4 = *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(
                                        l4.cast(),
                                        len6,
                                        len6,
                                    );
                                    _rt::string_lift(bytes6)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result7
                    }
                }
            }
            impl Options {
                #[allow(unused_unsafe, clippy::all)]
                pub fn require(&self, key: &str) -> Result<_rt::String, FdwError> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]options.require"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result10 = match l3 {
                            0 => {
                                let e = {
                                    let l4 = *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(
                                        l4.cast(),
                                        len6,
                                        len6,
                                    );
                                    _rt::string_lift(bytes6)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l7 = *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len9 = l8;
                                    let bytes9 = _rt::Vec::from_raw_parts(
                                        l7.cast(),
                                        len9,
                                        len9,
                                    );
                                    _rt::string_lift(bytes9)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result10
                    }
                }
            }
            impl Options {
                #[allow(unused_unsafe, clippy::all)]
                pub fn require_or(&self, key: &str, default: &str) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = default;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]options.require-or"]
                            fn wit_import3(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import3(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import3(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1.cast_mut(),
                                len1,
                                ptr2,
                            )
                        };
                        let l4 = *ptr2.add(0).cast::<*mut u8>();
                        let l5 = *ptr2
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len6 = l5;
                        let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                        let result7 = _rt::string_lift(bytes6);
                        result7
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]context"]
                            fn wit_import0() -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0() -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0() };
                        unsafe { Context::from_handle(ret as u32) }
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_options(&self, options_type: &OptionsType) -> Options {
                    unsafe {
                        let (result1_0, result1_1, result1_2) = match options_type {
                            OptionsType::Server => {
                                (0i32, ::core::ptr::null_mut(), 0usize)
                            }
                            OptionsType::Table => (1i32, ::core::ptr::null_mut(), 0usize),
                            OptionsType::ImportSchema => {
                                (2i32, ::core::ptr::null_mut(), 0usize)
                            }
                            OptionsType::Other(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (3i32, ptr0.cast_mut(), len0)
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]context.get-options"]
                            fn wit_import2(_: i32, _: i32, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                result1_0,
                                result1_1,
                                result1_2,
                            )
                        };
                        unsafe { Options::from_handle(ret as u32) }
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_quals(&self) -> _rt::Vec<Qual> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]context.get-quals"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base5 = l2;
                        let len5 = l3;
                        let mut result5 = _rt::Vec::with_capacity(len5);
                        for i in 0..len5 {
                            let base = base5.add(i * 4);
                            let e5 = {
                                let l4 = *base.add(0).cast::<i32>();
                                unsafe { Qual::from_handle(l4 as u32) }
                            };
                            result5.push(e5);
                        }
                        _rt::cabi_dealloc(base5, len5 * 4, 4);
                        let result6 = result5;
                        result6
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_columns(&self) -> _rt::Vec<Column> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]context.get-columns"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base5 = l2;
                        let len5 = l3;
                        let mut result5 = _rt::Vec::with_capacity(len5);
                        for i in 0..len5 {
                            let base = base5.add(i * 4);
                            let e5 = {
                                let l4 = *base.add(0).cast::<i32>();
                                unsafe { Column::from_handle(l4 as u32) }
                            };
                            result5.push(e5);
                        }
                        _rt::cabi_dealloc(base5, len5 * 4, 4);
                        let result6 = result5;
                        result6
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_sorts(&self) -> _rt::Vec<Sort> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]context.get-sorts"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base5 = l2;
                        let len5 = l3;
                        let mut result5 = _rt::Vec::with_capacity(len5);
                        for i in 0..len5 {
                            let base = base5.add(i * 4);
                            let e5 = {
                                let l4 = *base.add(0).cast::<i32>();
                                unsafe { Sort::from_handle(l4 as u32) }
                            };
                            result5.push(e5);
                        }
                        _rt::cabi_dealloc(base5, len5 * 4, 4);
                        let result6 = result5;
                        result6
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_limit(&self) -> Option<Limit> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.2.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]context.get-limit"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result4 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0.add(4).cast::<i32>();
                                    unsafe { Limit::from_handle(l3 as u32) }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result4
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod utils {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Cell = super::super::super::supabase::wrappers::types::Cell;
            #[allow(unused_unsafe, clippy::all)]
            pub fn report_info(msg: &str) -> () {
                unsafe {
                    let vec0 = msg;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/utils@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "report-info"]
                        fn wit_import1(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0.cast_mut(), len0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn report_notice(msg: &str) -> () {
                unsafe {
                    let vec0 = msg;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/utils@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "report-notice"]
                        fn wit_import1(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0.cast_mut(), len0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn report_warning(msg: &str) -> () {
                unsafe {
                    let vec0 = msg;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/utils@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "report-warning"]
                        fn wit_import1(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0.cast_mut(), len0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn report_error(msg: &str) -> () {
                unsafe {
                    let vec0 = msg;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/utils@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "report-error"]
                        fn wit_import1(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0.cast_mut(), len0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn cell_to_string(cell: Option<&Cell>) -> _rt::String {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let (result6_0, result6_1, result6_2, result6_3) = match cell {
                        Some(e) => {
                            use super::super::super::supabase::wrappers::types::Cell as V4;
                            let (result5_0, result5_1, result5_2) = match e {
                                V4::Bool(e) => {
                                    (
                                        0i32,
                                        ::core::mem::MaybeUninit::new(
                                            i64::from(
                                                match e {
                                                    true => 1,
                                                    false => 0,
                                                },
                                            ) as u64,
                                        ),
                                        0usize,
                                    )
                                }
                                V4::I8(e) => {
                                    (
                                        1i32,
                                        ::core::mem::MaybeUninit::new(
                                            i64::from(_rt::as_i32(e)) as u64,
                                        ),
                                        0usize,
                                    )
                                }
                                V4::I16(e) => {
                                    (
                                        2i32,
                                        ::core::mem::MaybeUninit::new(
                                            i64::from(_rt::as_i32(e)) as u64,
                                        ),
                                        0usize,
                                    )
                                }
                                V4::F32(e) => {
                                    (
                                        3i32,
                                        ::core::mem::MaybeUninit::new(
                                            i64::from((_rt::as_f32(e)).to_bits()) as u64,
                                        ),
                                        0usize,
                                    )
                                }
                                V4::I32(e) => {
                                    (
                                        4i32,
                                        ::core::mem::MaybeUninit::new(
                                            i64::from(_rt::as_i32(e)) as u64,
                                        ),
                                        0usize,
                                    )
                                }
                                V4::F64(e) => {
                                    (
                                        5i32,
                                        ::core::mem::MaybeUninit::new(
                                            (_rt::as_f64(e)).to_bits() as i64 as u64,
                                        ),
                                        0usize,
                                    )
                                }
                                V4::I64(e) => {
                                    (
                                        6i32,
                                        ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                        0usize,
                                    )
                                }
                                V4::Numeric(e) => {
                                    (
                                        7i32,
                                        ::core::mem::MaybeUninit::new(
                                            (_rt::as_f64(e)).to_bits() as i64 as u64,
                                        ),
                                        0usize,
                                    )
                                }
                                V4::String(e) => {
                                    let vec0 = e;
                                    let ptr0 = vec0.as_ptr().cast::<u8>();
                                    let len0 = vec0.len();
                                    (
                                        8i32,
                                        {
                                            let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                            t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                            t
                                        },
                                        len0,
                                    )
                                }
                                V4::Date(e) => {
                                    (
                                        9i32,
                                        ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                        0usize,
                                    )
                                }
                                V4::Timestamp(e) => {
                                    (
                                        10i32,
                                        ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                        0usize,
                                    )
                                }
                                V4::Timestamptz(e) => {
                                    (
                                        11i32,
                                        ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                        0usize,
                                    )
                                }
                                V4::Json(e) => {
                                    let vec1 = e;
                                    let ptr1 = vec1.as_ptr().cast::<u8>();
                                    let len1 = vec1.len();
                                    (
                                        12i32,
                                        {
                                            let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                            t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                            t
                                        },
                                        len1,
                                    )
                                }
                                V4::Uuid(e) => {
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    (
                                        13i32,
                                        {
                                            let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                            t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                            t
                                        },
                                        len2,
                                    )
                                }
                                V4::Other(e) => {
                                    let vec3 = e;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    (
                                        14i32,
                                        {
                                            let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                            t.as_mut_ptr().cast::<*mut u8>().write(ptr3.cast_mut());
                                            t
                                        },
                                        len3,
                                    )
                                }
                            };
                            (1i32, result5_0, result5_1, result5_2)
                        }
                        None => {
                            (
                                0i32,
                                0i32,
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                            )
                        }
                    };
                    let ptr7 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/utils@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "cell-to-string"]
                        fn wit_import8(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import8(
                        _: i32,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import8(result6_0, result6_1, result6_2, result6_3, ptr7)
                    };
                    let l9 = *ptr7.add(0).cast::<*mut u8>();
                    let l10 = *ptr7
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len11 = l10;
                    let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);
                    let result12 = _rt::string_lift(bytes11);
                    result12
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_vault_secret(secret_id: &str) -> Option<_rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = secret_id;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "supabase:wrappers/utils@0.2.0")]
                    unsafe extern "C" {
                        #[link_name = "get-vault-secret"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result7 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod supabase {
        pub mod wrappers {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod routines {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Cell = super::super::super::super::supabase::wrappers::types::Cell;
                pub type Row = super::super::super::super::supabase::wrappers::types::Row;
                pub type ImportForeignSchemaStmt = super::super::super::super::supabase::wrappers::types::ImportForeignSchemaStmt;
                pub type Context = super::super::super::super::supabase::wrappers::types::Context;
                pub type FdwError = super::super::super::super::supabase::wrappers::types::FdwError;
                pub type FdwResult = super::super::super::super::supabase::wrappers::types::FdwResult;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_host_version_requirement_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::host_version_requirement();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_host_version_requirement<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_init_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::init({
                        handle0 = unsafe {
                            super::super::super::super::supabase::wrappers::types::Context::from_handle(
                                arg0 as u32,
                            )
                        };
                        &handle0
                    });
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_init<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_begin_scan_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::begin_scan({
                        handle0 = unsafe {
                            super::super::super::super::supabase::wrappers::types::Context::from_handle(
                                arg0 as u32,
                            )
                        };
                        &handle0
                    });
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_begin_scan<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_iter_scan_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let handle1;
                    let result2 = T::iter_scan(
                        {
                            handle0 = unsafe {
                                super::super::super::super::supabase::wrappers::types::Context::from_handle(
                                    arg0 as u32,
                                )
                            };
                            &handle0
                        },
                        {
                            handle1 = unsafe {
                                super::super::super::super::supabase::wrappers::types::Row::from_handle(
                                    arg1 as u32,
                                )
                            };
                            &handle1
                        },
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            match e {
                                Some(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr3
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                None => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_iter_scan<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_re_scan_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::re_scan({
                        handle0 = unsafe {
                            super::super::super::super::supabase::wrappers::types::Context::from_handle(
                                arg0 as u32,
                            )
                        };
                        &handle0
                    });
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_re_scan<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_end_scan_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::end_scan({
                        handle0 = unsafe {
                            super::super::super::super::supabase::wrappers::types::Context::from_handle(
                                arg0 as u32,
                            )
                        };
                        &handle0
                    });
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_end_scan<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_begin_modify_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::begin_modify({
                        handle0 = unsafe {
                            super::super::super::super::supabase::wrappers::types::Context::from_handle(
                                arg0 as u32,
                            )
                        };
                        &handle0
                    });
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_begin_modify<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_insert_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let handle1;
                    let result2 = T::insert(
                        {
                            handle0 = unsafe {
                                super::super::super::super::supabase::wrappers::types::Context::from_handle(
                                    arg0 as u32,
                                )
                            };
                            &handle0
                        },
                        {
                            handle1 = unsafe {
                                super::super::super::super::supabase::wrappers::types::Row::from_handle(
                                    arg1 as u32,
                                )
                            };
                            &handle1
                        },
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(_) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_insert<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_update_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: ::core::mem::MaybeUninit<u64>,
                    arg3: usize,
                    arg4: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let handle6;
                    use super::super::super::super::supabase::wrappers::types::Cell as V5;
                    let v5 = match arg1 {
                        0 => {
                            let e5 = _rt::bool_lift(
                                arg2.assume_init() as i64 as i32 as u8,
                            );
                            V5::Bool(e5)
                        }
                        1 => {
                            let e5 = arg2.assume_init() as i64 as i32 as i8;
                            V5::I8(e5)
                        }
                        2 => {
                            let e5 = arg2.assume_init() as i64 as i32 as i16;
                            V5::I16(e5)
                        }
                        3 => {
                            let e5 = f32::from_bits(arg2.assume_init() as i64 as u32);
                            V5::F32(e5)
                        }
                        4 => {
                            let e5 = arg2.assume_init() as i64 as i32;
                            V5::I32(e5)
                        }
                        5 => {
                            let e5 = f64::from_bits(arg2.assume_init() as i64 as u64);
                            V5::F64(e5)
                        }
                        6 => {
                            let e5 = arg2.assume_init() as i64;
                            V5::I64(e5)
                        }
                        7 => {
                            let e5 = f64::from_bits(arg2.assume_init() as i64 as u64);
                            V5::Numeric(e5)
                        }
                        8 => {
                            let e5 = {
                                let len1 = arg3;
                                let bytes1 = _rt::Vec::from_raw_parts(
                                    arg2.as_ptr().cast::<*mut u8>().read().cast(),
                                    len1,
                                    len1,
                                );
                                _rt::string_lift(bytes1)
                            };
                            V5::String(e5)
                        }
                        9 => {
                            let e5 = arg2.assume_init() as i64;
                            V5::Date(e5)
                        }
                        10 => {
                            let e5 = arg2.assume_init() as i64;
                            V5::Timestamp(e5)
                        }
                        11 => {
                            let e5 = arg2.assume_init() as i64;
                            V5::Timestamptz(e5)
                        }
                        12 => {
                            let e5 = {
                                let len2 = arg3;
                                let bytes2 = _rt::Vec::from_raw_parts(
                                    arg2.as_ptr().cast::<*mut u8>().read().cast(),
                                    len2,
                                    len2,
                                );
                                _rt::string_lift(bytes2)
                            };
                            V5::Json(e5)
                        }
                        13 => {
                            let e5 = {
                                let len3 = arg3;
                                let bytes3 = _rt::Vec::from_raw_parts(
                                    arg2.as_ptr().cast::<*mut u8>().read().cast(),
                                    len3,
                                    len3,
                                );
                                _rt::string_lift(bytes3)
                            };
                            V5::Uuid(e5)
                        }
                        n => {
                            debug_assert_eq!(n, 14, "invalid enum discriminant");
                            let e5 = {
                                let len4 = arg3;
                                let bytes4 = _rt::Vec::from_raw_parts(
                                    arg2.as_ptr().cast::<*mut u8>().read().cast(),
                                    len4,
                                    len4,
                                );
                                _rt::string_lift(bytes4)
                            };
                            V5::Other(e5)
                        }
                    };
                    let result7 = T::update(
                        {
                            handle0 = unsafe {
                                super::super::super::super::supabase::wrappers::types::Context::from_handle(
                                    arg0 as u32,
                                )
                            };
                            &handle0
                        },
                        v5,
                        {
                            handle6 = unsafe {
                                super::super::super::super::supabase::wrappers::types::Row::from_handle(
                                    arg4 as u32,
                                )
                            };
                            &handle6
                        },
                    );
                    let ptr8 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result7 {
                        Ok(_) => {
                            *ptr8.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr8.add(0).cast::<u8>() = (1i32) as u8;
                            let vec9 = (e.into_bytes()).into_boxed_slice();
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            ::core::mem::forget(vec9);
                            *ptr8
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len9;
                            *ptr8
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr9.cast_mut();
                        }
                    };
                    ptr8
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_update<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_delete_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: ::core::mem::MaybeUninit<u64>,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    use super::super::super::super::supabase::wrappers::types::Cell as V5;
                    let v5 = match arg1 {
                        0 => {
                            let e5 = _rt::bool_lift(
                                arg2.assume_init() as i64 as i32 as u8,
                            );
                            V5::Bool(e5)
                        }
                        1 => {
                            let e5 = arg2.assume_init() as i64 as i32 as i8;
                            V5::I8(e5)
                        }
                        2 => {
                            let e5 = arg2.assume_init() as i64 as i32 as i16;
                            V5::I16(e5)
                        }
                        3 => {
                            let e5 = f32::from_bits(arg2.assume_init() as i64 as u32);
                            V5::F32(e5)
                        }
                        4 => {
                            let e5 = arg2.assume_init() as i64 as i32;
                            V5::I32(e5)
                        }
                        5 => {
                            let e5 = f64::from_bits(arg2.assume_init() as i64 as u64);
                            V5::F64(e5)
                        }
                        6 => {
                            let e5 = arg2.assume_init() as i64;
                            V5::I64(e5)
                        }
                        7 => {
                            let e5 = f64::from_bits(arg2.assume_init() as i64 as u64);
                            V5::Numeric(e5)
                        }
                        8 => {
                            let e5 = {
                                let len1 = arg3;
                                let bytes1 = _rt::Vec::from_raw_parts(
                                    arg2.as_ptr().cast::<*mut u8>().read().cast(),
                                    len1,
                                    len1,
                                );
                                _rt::string_lift(bytes1)
                            };
                            V5::String(e5)
                        }
                        9 => {
                            let e5 = arg2.assume_init() as i64;
                            V5::Date(e5)
                        }
                        10 => {
                            let e5 = arg2.assume_init() as i64;
                            V5::Timestamp(e5)
                        }
                        11 => {
                            let e5 = arg2.assume_init() as i64;
                            V5::Timestamptz(e5)
                        }
                        12 => {
                            let e5 = {
                                let len2 = arg3;
                                let bytes2 = _rt::Vec::from_raw_parts(
                                    arg2.as_ptr().cast::<*mut u8>().read().cast(),
                                    len2,
                                    len2,
                                );
                                _rt::string_lift(bytes2)
                            };
                            V5::Json(e5)
                        }
                        13 => {
                            let e5 = {
                                let len3 = arg3;
                                let bytes3 = _rt::Vec::from_raw_parts(
                                    arg2.as_ptr().cast::<*mut u8>().read().cast(),
                                    len3,
                                    len3,
                                );
                                _rt::string_lift(bytes3)
                            };
                            V5::Uuid(e5)
                        }
                        n => {
                            debug_assert_eq!(n, 14, "invalid enum discriminant");
                            let e5 = {
                                let len4 = arg3;
                                let bytes4 = _rt::Vec::from_raw_parts(
                                    arg2.as_ptr().cast::<*mut u8>().read().cast(),
                                    len4,
                                    len4,
                                );
                                _rt::string_lift(bytes4)
                            };
                            V5::Other(e5)
                        }
                    };
                    let result6 = T::delete(
                        {
                            handle0 = unsafe {
                                super::super::super::super::supabase::wrappers::types::Context::from_handle(
                                    arg0 as u32,
                                )
                            };
                            &handle0
                        },
                        v5,
                    );
                    let ptr7 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result6 {
                        Ok(_) => {
                            *ptr7.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr7.add(0).cast::<u8>() = (1i32) as u8;
                            let vec8 = (e.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *ptr7
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *ptr7
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    };
                    ptr7
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_delete<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_end_modify_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::end_modify({
                        handle0 = unsafe {
                            super::super::super::super::supabase::wrappers::types::Context::from_handle(
                                arg0 as u32,
                            )
                        };
                        &handle0
                    });
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_end_modify<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_import_foreign_schema_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let handle0;
                    let len1 = arg2;
                    let bytes1 = _rt::Vec::from_raw_parts(arg1.cast(), len1, len1);
                    let len2 = arg4;
                    let bytes2 = _rt::Vec::from_raw_parts(arg3.cast(), len2, len2);
                    let len3 = arg6;
                    let bytes3 = _rt::Vec::from_raw_parts(arg5.cast(), len3, len3);
                    use super::super::super::super::supabase::wrappers::types::ImportSchemaType as V4;
                    let v4 = match arg7 {
                        0 => V4::All,
                        1 => V4::LimitTo,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            V4::Except
                        }
                    };
                    let base8 = arg8;
                    let len8 = arg9;
                    let mut result8 = _rt::Vec::with_capacity(len8);
                    for i in 0..len8 {
                        let base = base8
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e8 = {
                            let l5 = *base.add(0).cast::<*mut u8>();
                            let l6 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            _rt::string_lift(bytes7)
                        };
                        result8.push(e8);
                    }
                    _rt::cabi_dealloc(
                        base8,
                        len8 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result9 = T::import_foreign_schema(
                        {
                            handle0 = unsafe {
                                super::super::super::super::supabase::wrappers::types::Context::from_handle(
                                    arg0 as u32,
                                )
                            };
                            &handle0
                        },
                        super::super::super::super::supabase::wrappers::types::ImportForeignSchemaStmt {
                            server_name: _rt::string_lift(bytes1),
                            remote_schema: _rt::string_lift(bytes2),
                            local_schema: _rt::string_lift(bytes3),
                            list_type: v4,
                            table_list: result8,
                        },
                    );
                    let ptr10 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result9 {
                        Ok(e) => {
                            *ptr10.add(0).cast::<u8>() = (0i32) as u8;
                            let vec12 = e;
                            let len12 = vec12.len();
                            let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result12 = if layout12.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout12);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec12.into_iter().enumerate() {
                                let base = result12
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *base.add(0).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                            }
                            *ptr10
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len12;
                            *ptr10
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result12;
                        }
                        Err(e) => {
                            *ptr10.add(0).cast::<u8>() = (1i32) as u8;
                            let vec13 = (e.into_bytes()).into_boxed_slice();
                            let ptr13 = vec13.as_ptr().cast::<u8>();
                            let len13 = vec13.len();
                            ::core::mem::forget(vec13);
                            *ptr10
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len13;
                            *ptr10
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr13.cast_mut();
                        }
                    };
                    ptr10
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_import_foreign_schema<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base5 = l1;
                            let len5 = l2;
                            for i in 0..len5 {
                                let base = base5
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                }
                            }
                            _rt::cabi_dealloc(
                                base5,
                                len5 * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l6 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l7 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l6, l7, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// ----------------------------------------------
                    /// foreign data wrapper interface functions
                    /// ----------------------------------------------
                    /// define host version requirement, e.g, "^1.2.3"
                    fn host_version_requirement() -> _rt::String;
                    /// fdw initialization
                    fn init(ctx: &Context) -> FdwResult;
                    /// data scan
                    fn begin_scan(ctx: &Context) -> FdwResult;
                    fn iter_scan(
                        ctx: &Context,
                        row: &Row,
                    ) -> Result<Option<u32>, FdwError>;
                    fn re_scan(ctx: &Context) -> FdwResult;
                    fn end_scan(ctx: &Context) -> FdwResult;
                    /// data modify
                    fn begin_modify(ctx: &Context) -> FdwResult;
                    fn insert(ctx: &Context, row: &Row) -> FdwResult;
                    fn update(ctx: &Context, rowid: Cell, new_row: &Row) -> FdwResult;
                    fn delete(ctx: &Context, rowid: Cell) -> FdwResult;
                    fn end_modify(ctx: &Context) -> FdwResult;
                    /// import foreign schema
                    fn import_foreign_schema(
                        ctx: &Context,
                        stmt: ImportForeignSchemaStmt,
                    ) -> Result<_rt::Vec<_rt::String>, FdwError>;
                }
                #[doc(hidden)]
                macro_rules! __export_supabase_wrappers_routines_0_2_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "supabase:wrappers/routines@0.2.0#host-version-requirement")]
                        unsafe extern "C" fn export_host_version_requirement() -> * mut
                        u8 { unsafe { $($path_to_types)*::
                        _export_host_version_requirement_cabi::<$ty > () } } #[unsafe
                        (export_name =
                        "cabi_post_supabase:wrappers/routines@0.2.0#host-version-requirement")]
                        unsafe extern "C" fn _post_return_host_version_requirement(arg0 :
                        * mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_host_version_requirement::<$ty > (arg0) } }
                        #[unsafe (export_name = "supabase:wrappers/routines@0.2.0#init")]
                        unsafe extern "C" fn export_init(arg0 : i32,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_init_cabi::<$ty > (arg0) }
                        } #[unsafe (export_name =
                        "cabi_post_supabase:wrappers/routines@0.2.0#init")] unsafe extern
                        "C" fn _post_return_init(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_init::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "supabase:wrappers/routines@0.2.0#begin-scan")] unsafe extern "C"
                        fn export_begin_scan(arg0 : i32,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_begin_scan_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_supabase:wrappers/routines@0.2.0#begin-scan")] unsafe
                        extern "C" fn _post_return_begin_scan(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*:: __post_return_begin_scan::<$ty > (arg0) }
                        } #[unsafe (export_name =
                        "supabase:wrappers/routines@0.2.0#iter-scan")] unsafe extern "C"
                        fn export_iter_scan(arg0 : i32, arg1 : i32,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_iter_scan_cabi::<$ty > (arg0,
                        arg1) } } #[unsafe (export_name =
                        "cabi_post_supabase:wrappers/routines@0.2.0#iter-scan")] unsafe
                        extern "C" fn _post_return_iter_scan(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_iter_scan::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "supabase:wrappers/routines@0.2.0#re-scan")] unsafe extern "C" fn
                        export_re_scan(arg0 : i32,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_re_scan_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_supabase:wrappers/routines@0.2.0#re-scan")] unsafe
                        extern "C" fn _post_return_re_scan(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_re_scan::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "supabase:wrappers/routines@0.2.0#end-scan")] unsafe extern "C"
                        fn export_end_scan(arg0 : i32,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_end_scan_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_supabase:wrappers/routines@0.2.0#end-scan")] unsafe
                        extern "C" fn _post_return_end_scan(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_end_scan::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "supabase:wrappers/routines@0.2.0#begin-modify")] unsafe extern
                        "C" fn export_begin_modify(arg0 : i32,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_begin_modify_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_supabase:wrappers/routines@0.2.0#begin-modify")]
                        unsafe extern "C" fn _post_return_begin_modify(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*:: __post_return_begin_modify::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "supabase:wrappers/routines@0.2.0#insert")] unsafe extern "C" fn
                        export_insert(arg0 : i32, arg1 : i32,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_insert_cabi::<$ty > (arg0, arg1) } }
                        #[unsafe (export_name =
                        "cabi_post_supabase:wrappers/routines@0.2.0#insert")] unsafe
                        extern "C" fn _post_return_insert(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_insert::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "supabase:wrappers/routines@0.2.0#update")] unsafe extern "C" fn
                        export_update(arg0 : i32, arg1 : i32, arg2 :
                        ::core::mem::MaybeUninit::< u64 >, arg3 : usize, arg4 : i32,) ->
                        * mut u8 { unsafe { $($path_to_types)*::
                        _export_update_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4) } }
                        #[unsafe (export_name =
                        "cabi_post_supabase:wrappers/routines@0.2.0#update")] unsafe
                        extern "C" fn _post_return_update(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_update::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "supabase:wrappers/routines@0.2.0#delete")] unsafe extern "C" fn
                        export_delete(arg0 : i32, arg1 : i32, arg2 :
                        ::core::mem::MaybeUninit::< u64 >, arg3 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_delete_cabi::<$ty > (arg0,
                        arg1, arg2, arg3) } } #[unsafe (export_name =
                        "cabi_post_supabase:wrappers/routines@0.2.0#delete")] unsafe
                        extern "C" fn _post_return_delete(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_delete::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "supabase:wrappers/routines@0.2.0#end-modify")] unsafe extern "C"
                        fn export_end_modify(arg0 : i32,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_end_modify_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_supabase:wrappers/routines@0.2.0#end-modify")] unsafe
                        extern "C" fn _post_return_end_modify(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*:: __post_return_end_modify::<$ty > (arg0) }
                        } #[unsafe (export_name =
                        "supabase:wrappers/routines@0.2.0#import-foreign-schema")] unsafe
                        extern "C" fn export_import_foreign_schema(arg0 : i32, arg1 : *
                        mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize, arg5 : * mut
                        u8, arg6 : usize, arg7 : i32, arg8 : * mut u8, arg9 : usize,) ->
                        * mut u8 { unsafe { $($path_to_types)*::
                        _export_import_foreign_schema_cabi::<$ty > (arg0, arg1, arg2,
                        arg3, arg4, arg5, arg6, arg7, arg8, arg9) } } #[unsafe
                        (export_name =
                        "cabi_post_supabase:wrappers/routines@0.2.0#import-foreign-schema")]
                        unsafe extern "C" fn _post_return_import_foreign_schema(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_import_foreign_schema::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_supabase_wrappers_routines_0_2_0_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 3 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 3
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::string::String;
    pub use alloc_crate::alloc;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_open_weather_fdw_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::supabase::wrappers::routines::__export_supabase_wrappers_routines_0_2_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::supabase::wrappers::routines);
    };
}
#[doc(inline)]
pub(crate) use __export_open_weather_fdw_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:powabase:supabase-fdw-open-weather@0.3.3:open-weather-fdw:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3671] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd0\x1b\x01A\x02\x01\
A\x10\x01B\x16\x01o\x02ss\x01p\0\x04\0\x07headers\x03\0\x01\x01q\x05\x03get\0\0\x04\
post\0\0\x03put\0\0\x05patch\0\0\x06delete\0\0\x04\0\x06method\x03\0\x03\x01r\x04\
\x06method\x04\x03urls\x07headers\x02\x04bodys\x04\0\x07request\x03\0\x05\x01r\x04\
\x03urls\x0bstatus-code{\x07headers\x02\x04bodys\x04\0\x08response\x03\0\x07\x01\
s\x04\0\x0ahttp-error\x03\0\x09\x01j\x01\x08\x01\x0a\x04\0\x0bhttp-result\x03\0\x0b\
\x01@\x01\x03req\x06\0\x0c\x04\0\x03get\x01\x0d\x04\0\x04post\x01\x0d\x04\0\x03p\
ut\x01\x0d\x04\0\x05patch\x01\x0d\x04\0\x06delete\x01\x0d\x01j\0\x01\x0a\x01@\x01\
\x04resp\x08\0\x0e\x04\0\x10error-for-status\x01\x0f\x03\0\x1csupabase:wrappers/\
http@0.2.0\x05\0\x01B\x0a\x01ks\x04\0\x08metadata\x03\0\0\x01q\x05\x0ccreate-tim\
es\0\0\x07rows-in\0\0\x08rows-out\0\0\x08bytes-in\0\0\x09bytes-out\0\0\x04\0\x06\
metric\x03\0\x02\x01@\x03\x08fdw-names\x06metric\x03\x03incx\x01\0\x04\0\x09inc-\
stats\x01\x04\x01@\x01\x08fdw-names\0\x01\x04\0\x0cget-metadata\x01\x05\x01@\x02\
\x08fdw-names\x08metadata\x01\x01\0\x04\0\x0cset-metadata\x01\x06\x03\0\x1dsupab\
ase:wrappers/stats@0.2.0\x05\x01\x01Bv\x01q\x0f\x04bool\0\0\x02i8\0\0\x03i16\0\0\
\x03f32\0\0\x03i32\0\0\x03f64\0\0\x03i64\0\0\x07numeric\0\0\x06string\0\0\x04dat\
e\0\0\x09timestamp\0\0\x0btimestamptz\0\0\x04json\0\0\x04uuid\0\0\x05other\x01s\0\
\x04\0\x08type-oid\x03\0\0\x01q\x0f\x04bool\x01\x7f\0\x02i8\x01~\0\x03i16\x01|\0\
\x03f32\x01v\0\x03i32\x01z\0\x03f64\x01u\0\x03i64\x01x\0\x07numeric\x01u\0\x06st\
ring\x01s\0\x04date\x01x\0\x09timestamp\x01x\0\x0btimestamptz\x01x\0\x04json\x01\
s\0\x04uuid\x01s\0\x05other\x01s\0\x04\0\x04cell\x03\0\x02\x04\0\x03row\x03\x01\x04\
\0\x06column\x03\x01\x01p\x03\x01q\x02\x04cell\x01\x03\0\x05array\x01\x06\0\x04\0\
\x05value\x03\0\x07\x01r\x02\x02idy\x08type-oidy\x04\0\x05param\x03\0\x09\x04\0\x04\
qual\x03\x01\x04\0\x04sort\x03\x01\x04\0\x05limit\x03\x01\x01q\x04\x06server\0\0\
\x05table\0\0\x0dimport-schema\0\0\x05other\x01s\0\x04\0\x0coptions-type\x03\0\x0e\
\x04\0\x07options\x03\x01\x01q\x03\x03all\0\0\x08limit-to\0\0\x06except\0\0\x04\0\
\x12import-schema-type\x03\0\x11\x01ps\x01r\x05\x0bserver-names\x0dremote-schema\
s\x0clocal-schemas\x09list-type\x12\x0atable-list\x13\x04\0\x1aimport-foreign-sc\
hema-stmt\x03\0\x14\x04\0\x07context\x03\x01\x01s\x04\0\x09fdw-error\x03\0\x17\x01\
j\0\x01\x18\x04\0\x0afdw-result\x03\0\x19\x01i\x04\x01@\0\0\x1b\x04\0\x10[constr\
uctor]row\x01\x1c\x01h\x04\x01@\x01\x04self\x1d\0\x13\x04\0\x10[method]row.cols\x01\
\x1e\x01k\x03\x01p\x1f\x01@\x01\x04self\x1d\0\x20\x04\0\x11[method]row.cells\x01\
!\x01@\x02\x04self\x1d\x04cell\x1f\x01\0\x04\0\x10[method]row.push\x01\"\x01i\x05\
\x01@\x01\x05indexy\0#\x04\0\x13[constructor]column\x01$\x01h\x05\x01@\x01\x04se\
lf%\0s\x04\0\x13[method]column.name\x01&\x01@\x01\x04self%\0y\x04\0\x12[method]c\
olumn.num\x01'\x01@\x01\x04self%\0\x01\x04\0\x17[method]column.type-oid\x01(\x01\
i\x0b\x01@\x01\x05indexy\0)\x04\0\x11[constructor]qual\x01*\x01h\x0b\x01@\x01\x04\
self+\0s\x04\0\x12[method]qual.field\x01,\x04\0\x15[method]qual.operator\x01,\x01\
@\x01\x04self+\0\x08\x04\0\x12[method]qual.value\x01-\x01@\x01\x04self+\0\x7f\x04\
\0\x13[method]qual.use-or\x01.\x01k\x0a\x01@\x01\x04self+\0/\x04\0\x12[method]qu\
al.param\x010\x04\0\x14[method]qual.deparse\x01,\x01i\x0c\x01@\x01\x05indexy\01\x04\
\0\x11[constructor]sort\x012\x01h\x0c\x01@\x01\x04self3\0s\x04\0\x12[method]sort\
.field\x014\x01@\x01\x04self3\0y\x04\0\x15[method]sort.field-no\x015\x01@\x01\x04\
self3\0\x7f\x04\0\x15[method]sort.reversed\x016\x04\0\x18[method]sort.nulls-firs\
t\x016\x01ks\x01@\x01\x04self3\07\x04\0\x14[method]sort.collate\x018\x04\0\x14[m\
ethod]sort.deparse\x014\x04\0![method]sort.deparse-with-collate\x014\x01i\x0d\x01\
@\0\09\x04\0\x12[constructor]limit\x01:\x01h\x0d\x01@\x01\x04self;\0x\x04\0\x13[\
method]limit.count\x01<\x04\0\x14[method]limit.offset\x01<\x01@\x01\x04self;\0s\x04\
\0\x15[method]limit.deparse\x01=\x01i\x10\x01@\x01\x0coptions-type\x0f\0>\x04\0\x14\
[constructor]options\x01?\x01h\x10\x01@\x02\x04self\xc0\0\x03keys\07\x04\0\x13[m\
ethod]options.get\x01A\x01j\x01s\x01\x18\x01@\x02\x04self\xc0\0\x03keys\0\xc2\0\x04\
\0\x17[method]options.require\x01C\x01@\x03\x04self\xc0\0\x03keys\x07defaults\0s\
\x04\0\x1a[method]options.require-or\x01D\x01i\x16\x01@\0\0\xc5\0\x04\0\x14[cons\
tructor]context\x01F\x01h\x16\x01@\x02\x04self\xc7\0\x0coptions-type\x0f\0>\x04\0\
\x1b[method]context.get-options\x01H\x01p)\x01@\x01\x04self\xc7\0\0\xc9\0\x04\0\x19\
[method]context.get-quals\x01J\x01p#\x01@\x01\x04self\xc7\0\0\xcb\0\x04\0\x1b[me\
thod]context.get-columns\x01L\x01p1\x01@\x01\x04self\xc7\0\0\xcd\0\x04\0\x19[met\
hod]context.get-sorts\x01N\x01k9\x01@\x01\x04self\xc7\0\0\xcf\0\x04\0\x19[method\
]context.get-limit\x01P\x03\0\x1dsupabase:wrappers/types@0.2.0\x05\x02\x02\x03\0\
\x02\x04cell\x01B\x0d\x02\x03\x02\x01\x03\x04\0\x04cell\x03\0\0\x01@\x01\x03msgs\
\x01\0\x04\0\x0breport-info\x01\x02\x04\0\x0dreport-notice\x01\x02\x04\0\x0erepo\
rt-warning\x01\x02\x04\0\x0creport-error\x01\x02\x01k\x01\x01@\x01\x04cell\x03\0\
s\x04\0\x0ecell-to-string\x01\x04\x01ks\x01@\x01\x09secret-ids\0\x05\x04\0\x10ge\
t-vault-secret\x01\x06\x03\0\x1dsupabase:wrappers/utils@0.2.0\x05\x04\x02\x03\0\x02\
\x03row\x02\x03\0\x02\x1aimport-foreign-schema-stmt\x02\x03\0\x02\x07context\x02\
\x03\0\x02\x09fdw-error\x02\x03\0\x02\x0afdw-result\x01B%\x02\x03\x02\x01\x03\x04\
\0\x04cell\x03\0\0\x02\x03\x02\x01\x05\x04\0\x03row\x03\0\x02\x02\x03\x02\x01\x06\
\x04\0\x1aimport-foreign-schema-stmt\x03\0\x04\x02\x03\x02\x01\x07\x04\0\x07cont\
ext\x03\0\x06\x02\x03\x02\x01\x08\x04\0\x09fdw-error\x03\0\x08\x02\x03\x02\x01\x09\
\x04\0\x0afdw-result\x03\0\x0a\x01@\0\0s\x04\0\x18host-version-requirement\x01\x0c\
\x01h\x07\x01@\x01\x03ctx\x0d\0\x0b\x04\0\x04init\x01\x0e\x04\0\x0abegin-scan\x01\
\x0e\x01h\x03\x01ky\x01j\x01\x10\x01\x09\x01@\x02\x03ctx\x0d\x03row\x0f\0\x11\x04\
\0\x09iter-scan\x01\x12\x04\0\x07re-scan\x01\x0e\x04\0\x08end-scan\x01\x0e\x04\0\
\x0cbegin-modify\x01\x0e\x01@\x02\x03ctx\x0d\x03row\x0f\0\x0b\x04\0\x06insert\x01\
\x13\x01@\x03\x03ctx\x0d\x05rowid\x01\x07new-row\x0f\0\x0b\x04\0\x06update\x01\x14\
\x01@\x02\x03ctx\x0d\x05rowid\x01\0\x0b\x04\0\x06delete\x01\x15\x04\0\x0aend-mod\
ify\x01\x0e\x01ps\x01j\x01\x16\x01\x09\x01@\x02\x03ctx\x0d\x04stmt\x05\0\x17\x04\
\0\x15import-foreign-schema\x01\x18\x04\0\x20supabase:wrappers/routines@0.2.0\x05\
\x0a\x04\09powabase:supabase-fdw-open-weather/open-weather-fdw@0.3.3\x04\0\x0b\x16\
\x01\0\x10open-weather-fdw\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwi\
t-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
